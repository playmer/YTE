set_property(GLOBAL PROPERTY YTE_Target_Precompiled_Headers_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/Precompiled.in)


# Adds right string to left string.
function (YTE_Add_Line aLeft aRight)
  set(${aLeft} "${${aLeft}}\n${aRight}" PARENT_SCOPE)
endfunction(YTE_Add_Line)

# Should be run after all link targets are defined, and all sources are added.
function(YTE_Target_Precompiled_Headers aTarget)
  set(options "")  
  set(oneValueArgs TARGET)
  set(multiValueArgs PRIVATE PUBLIC)

  cmake_parse_arguments(PARSE_ARGV
                        1 
                        YTE_Target_Precompiled_Headers
                        "${options}"
                        "${oneValueArgs}"
                        "${multiValueArgs}")

  if(NOT TARGET ${aTarget})
    message(SEND_ERROR "YTE_Target_Precompiled_Headers could not find a target. Provided with: \n"
      "First argument: ${aTarget}\n"
      "TARGET argument: ${YTE_Target_Precompiled_Headers_TARGET}")
  endif()

  set(publicHeaderName "${aTarget}_Public_Precompiled.hpp")
  set(privateHeaderName "${aTarget}_Private_Precompiled.hpp")
  set(sourceName "${aTarget}_Source_Precompiled.cpp")

  get_target_property(sourceDir ${aTarget} SOURCE_DIR)

  get_filename_component(pathToPublicHeader ${publicHeaderName} ABSOLUTE BASE_DIR ${sourceDir})
  get_filename_component(pathToPrivateHeader ${privateHeaderName} ABSOLUTE BASE_DIR ${sourceDir})
  get_filename_component(pathToSource ${sourceName} ABSOLUTE BASE_DIR ${sourceDir})

  YTE_Add_Line(publicHeaderContents "// This is a precompiled header file generated by")
  YTE_Add_Line(publicHeaderContents "// YTE_Target_Precompiled_Headers for ${aTarget}.")
  YTE_Add_Line(publicHeaderContents "#pragma once\n")

  # These are the same so far, so just copy.
  set(privateHeaderContents "${publicHeaderContents}")

  # Public include guard.
  YTE_Add_Line(publicHeaderContents "#ifndef ${aTarget}_PUBLIC_PRECOMPILED_HEADER_HPP")
  YTE_Add_Line(publicHeaderContents "#define ${aTarget}_PUBLIC_PRECOMPILED_HEADER_HPP")

  # Private include guard.
  YTE_Add_Line(privateHeaderContents "#ifndef ${aTarget}_PRIVATE_PRECOMPILED_HEADER_HPP")
  YTE_Add_Line(privateHeaderContents "#define ${aTarget}_PRIVATE_PRECOMPILED_HEADER_HPP")
  
  #Add the public header to the private header for ease of inclusion in the source.
  YTE_Add_Line(privateHeaderContents "#include \"${pathToPublicHeader}\"")

  foreach(publicHeader ${YTE_Target_Precompiled_Headers_PUBLIC})
    # Check to see if the header includes the <> or "" for inclusion. If not, add "".
    if (${publicHeader} MATCHES "\".*\"" OR ${publicHeader} MATCHES "<.*>")
      YTE_Add_Line(publicHeaderContents "#include ${publicHeader}")
    else()
      YTE_Add_Line(publicHeaderContents "#include \"${publicHeader}\"")
    endif()
  endforeach()

  foreach(privateHeader ${YTE_Target_Precompiled_Headers_PRIVATE})
    # Check to see if the header includes the <> or "" for inclusion. If not, add "".
    if (${privateHeader} MATCHES "\".*\"" OR ${privateHeader} MATCHES "<.*>")
      YTE_Add_Line(privateHeaderContents "#include ${privateHeader}")
    else()
      YTE_Add_Line(privateHeaderContents "#include \"${privateHeader}\"")
    endif()
  endforeach()

  get_target_property(targetLinkLibraries ${aTarget} LINK_LIBRARIES)
  foreach(linkLibrary ${targetLinkLibraries})
    if (TARGET ${linkLibrary})
      get_property(libraryHasPrecompiledHeaders
                   GLOBAL 
                   PROPERTY "${linkLibrary}_Precompiled_Headers_Enabled")

      if (libraryHasPrecompiledHeaders)
        get_target_property(libSourceDir ${linkLibrary} SOURCE_DIR)

        set(libraryPublicHeaderName "${linkLibrary}_Public_Precompiled.hpp")
        get_filename_component(pathTolibraryPublicHeader 
                               ${libraryPublicHeaderName} 
                               ABSOLUTE 
                               BASE_DIR 
                               ${libSourceDir})

        YTE_Add_Line(publicHeaderContents "#include \"${pathTolibraryPublicHeader}\"")
      endif()
    endif()
  endforeach()

  # Ending include guards
  YTE_Add_Line(publicHeaderContents "#endif")
  YTE_Add_Line(privateHeaderContents "#endif")

  YTE_Add_Line(sourceContents "// This is a precompiled source file generated by")
  YTE_Add_Line(sourceContents "// YTE_Target_Precompiled_Headers for ${aTarget}.")
  YTE_Add_Line(sourceContents "#include \"${pathToPrivateHeader}\"\n")

  get_property(precompiledInFile
               GLOBAL 
               PROPERTY YTE_Target_Precompiled_Headers_DIRECTORY)

  set(CMAKE_PRECOMPILED_FILE_CONTENTS ${publicHeaderContents})
  configure_file(${precompiledInFile} ${pathToPublicHeader})
  set(CMAKE_PRECOMPILED_FILE_CONTENTS ${privateHeaderContents})
  configure_file(${precompiledInFile} ${pathToPrivateHeader})
  set(CMAKE_PRECOMPILED_FILE_CONTENTS ${sourceContents})
  configure_file(${precompiledInFile} ${pathToSource})

  set(precompiledObj "${aTarget}_Source_Precompiled.pch")

  get_target_property(targetSources ${aTarget} SOURCES)

  foreach (targetSource ${targetSources})
    set_source_files_properties(${targetSource} PROPERTIES OBJECT_DEPENDS ${precompiledObj})
  endforeach()

  target_sources(${aTarget}
    PRIVATE
      ${pathToPrivateHeader}
      ${pathToPublicHeader}
      ${pathToSource}
  )

  if (${MSVC})
    target_compile_options(${aTarget} PRIVATE "/Yu${pathToPrivateHeader}"
                                              "/FI${pathToPrivateHeader}"
                                              "/Fp${precompiledObj}")
  else()
    message(SEND_ERROR "YTE_Target_Precompiled_Headers doesn't currently support anything but MSVC.")
  endif()

  set_source_files_properties(${pathToPrivateHeader} PROPERTIES GENERATED ON)
  set_source_files_properties(${pathToPublicHeader} PROPERTIES GENERATED ON)
  set_source_files_properties(${pathToSource} PROPERTIES GENERATED ON)
  set_source_files_properties(${pathToSource} PROPERTIES COMPILE_FLAGS
                              "/Yc${pathToPrivateHeader} /Fp${precompiledObj}")
  set_source_files_properties(${pathToSource} PROPERTIES OBJECT_OUTPUTS ${precompiledObj})

  set_property(GLOBAL PROPERTY "${aTarget}_Precompiled_Headers_Enabled" TRUE)

  get_target_property(targetSources ${aTarget} SOURCES)

endfunction(YTE_Target_Precompiled_Headers)
